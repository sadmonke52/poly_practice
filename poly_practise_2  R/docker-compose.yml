services:
  myproducer:
    build:
      context: ./myproducer
      dockerfile: Dockerfile
    container_name: myproducer_test
    ports:
      - "9100:9100"
    restart: unless-stopped
    environment:
      - CONFIG_PATH=/etc/myapp/config.yaml
      - KAFKA_BROKER=kafka:29092
    volumes:
      - ./myproducer/config/local.yaml:/etc/myapp/config.yaml:ro
    depends_on:
      kafka:
          condition: service_healthy

  collector:
    build:
      context: ./collector
      dockerfile: Dockerfile
    container_name: collector_test
    ports:
      - "9200:9200"
    restart: unless-stopped
    environment:
      - CONFIG_PATH=/etc/myapp/config.yaml
      - KAFKA_BROKER=kafka:29092
    volumes:
      - ./collector/config/local.yaml:/etc/myapp/config.yaml:ro
    depends_on:
      kafka:
          condition: service_healthy

  redis2:
    image: redis:6-alpine
    container_name: redis_poly_practice_test
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped

  processor:
    build:
      context: ./processor
      dockerfile: Dockerfile
    container_name: processor_test
    ports:
      - "9300:9300"
    restart: unless-stopped
    environment:
      - CONFIG_PATH=/etc/myapp/config.yaml
      - KAFKA_BROKER=kafka:29092
      - REDIS_ADDRESS=redis2:6379
      - REDIS_DB=0
    volumes:
      - ./processor/config/local.yaml:/etc/myapp/config.yaml:ro
    depends_on:
       kafka:
          condition: service_healthy
       redis2:
          condition: service_started

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: poly_practice_2_test-zookeeper-1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: poly_practice_2_test-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100 
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      - zookeeper
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui_poly_practice_test
    ports:
      - "8080:8080"
    depends_on:
       kafka:
          condition: service_healthy
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    restart: unless-stopped
        
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - myproducer
      - collector
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./provisioning/datasources/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./provisioning/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./provisioning/dashboards/go-runtime.json:/etc/grafana/provisioning/dashboards/go-runtime.json
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander_poly_practice_test
    environment:
      - REDIS_HOSTS=local:redis2:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis2
  
  
  topic-init:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      kafka:
        condition: service_started
    entrypoint: >
      bash -c '
        until kafka-topics --bootstrap-server kafka:9092 --list &>/dev/null; do
          echo "⏳ waiting for kafka...";
          sleep 1;
        done &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic test-topic --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic payment-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic analytics-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic inventory-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic order-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic shipping-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic notification-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic audit-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic metrics-events --partitions 2 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic collector.aggregated-events --partitions 4 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic collector.user-stats --partitions 4 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic collector.daily-summary --partitions 4 --replication-factor 1 &&
        echo "✅ topics ready."
      '
volumes:
  grafana-data: {}
  redis-data: {}

